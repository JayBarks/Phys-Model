# -*- coding: utf-8 -*-
"""
Created on Thu Oct 22 13:23:49 2020

@author: James-
"""
import math 

def load_defaults():
    print('Loading defaults...')
    # Framework
    days = 365 * 3 # One year
    dt   = 0.01 # units: days   
   
    
    # Parameters
    par = {}
    # EXAMPLE: par['mu'] = 1
    # Parameters for Macrosystis
    par['μ'] = 0.2 # max growth rate (d^-1)
    par['VNH4'] = 8 # max uptake rate amm. (mg N g^-1 dw d^-1)
    par['VNO3'] = 10.3 # max uptake rate nit. (mg N g^-1 dw d^-1)
    par['KNH4'] = 74.2 # half saturation const. amm. (mg N m^-3)
    par['KNO3'] = 182 # half saturation const. nit. (mg N m^-3)
    par['Qmax'] = 25.0 # max internal nitrogen (mg N g^-1 dw)
    par['Qmin'] = 7.0 # min internal nitrogen (mg N g^-1 dw)
    par['Kc'] = 6.0 # half growth constant (mg N g^-1) 
    par['To'] = 12 # optimal temp. (degrees celsius)
    par['Tr'] = 1.0 # range of optimal temp (degrees celsius) 
    par['Is'] = 134.0 # saturation irridiance (μmol photons m^-2 s^-1)
    par['acs'] = 0.0001 # nitrogen specific shading (m^2 mg^-1 N)
    par['dm'] = 0.003 # mortality rate (d^-1)
    par['num_fronds'] = 7 # number of fronds  (dimensionless)
    par['rL'] = 0.2 # remineralization rate (d^-1)
    par['rN'] = 0.1 # nitrification rate 
    par['λR'] = 0.25 # (d^-1) Fin/Vfarm effect of the flow rate on algae in abscence of an advection diffusion model. Aldridge and Trimmer, 2009.
    par['Kd'] = 0.1 # light attenuation coefficient (m^-1)
    par['h'] = 0 
    par['z'] = 3 # cultivation depth (m)
    
    # Initial conditions
    InitCond = {}
    # EXAMPLE: InitCond['P'] = 1
    InitCond['Nfarm'] = 100 #(N m^-3 d^-1)
    
    return  days, dt, par, InitCond
    
def run(days, dt, par, InitCond,forc):
    print('Running model...')
    # Import libraries
    import numpy as np
    
    # Setup the framework 
    NoSTEPS = int(days / dt) # Calculates the number of steps 
    time = np.linspace(0,days,NoSTEPS) # Makes vector array of equally spaced numbers 
    I = np.zeros((NoSTEPS,),float)
    temp = np.zeros((NoSTEPS,),float)
    nutrients = np.zeros((NoSTEPS,),float)
    
    #Create the environment light/temperature/nutrients
    #I = Iav + Isd * math.sin((2πt/365)+ts)
    #temp= tempav + tempsd * math.sin((2πt/365)+ts)
    #nutrients = nutrientsav + nutrientssd * math.sin((2πt/365)+ts)

    # Create arrays of zeros
    # EXAMPLE: P = np.zeros((NoSTEPS), float)
    NH4 = np.zeros((NoSTEPS), float)
    NO3 = np.zeros((NoSTEPS), float)
    Ns = np.zeros((NoSTEPS), float)
    Nf = np.zeros((NoSTEPS), float)
    D = np.zeros((NoSTEPS), float)
    
    # Initializing with initial conditions
    # EXAMPLE: P[0] = InitCond['P']
    NH4[0] = InitCond['NH4']
    NO3[0] = InitCond['NO3']
    Ns[0] = InitCond['Ns']
    Nf[0] = InitCond['Nf']
    D[0] = InitCond['D']
    
    # *****************************************************************************
    # MAIN MODEL LOOP *************************************************************
    for t in range(0,NoSTEPS-1):
        # Estimate limiting functions
        
        # General model behaviour
        hma = (.00174*Nf/par['num_fronds'])**1.047
        N = InitCond['Nfarm']*t*(par['z'])# Daily accumulated N per unit area of macroalge farm input from salmon activity 
        Nfixed = Nf * hma # Fixed N (mg N m^-2)
        Nstored = Ns * hma # Stored N (mg N m^-2)
        Ntotal = Nfixed + Nstored # Total N removed (mg N m^-2)
        
        # Biological Intermediate Processes 
        #Ez = math.exp(0)(math.exp(−K*z)) # irradiance at top of macroalgal canopy (μmol photons m^-2 s^-1)
        K = par['Kd'] + Kma # extincition rate of light due to water and algae (m^-1)
        Q = par['Qmin']*(1+(NsNf**-1)) # internal nutrient quota of macroalgae (mg N g^-1 dw)
        B = Nf*par['Qmin']**-1 # biomass of dry macroalgae (g dw m**-3)
        gE = (math.exp(1)/(K*(par['h']))) * ((math.exp((-Ez*(math.exp(-K*par['h']))))/Is)) - math.exp(-Ez/(par['Is'])) # growth limitation due to light 
        gQ = (Q - (par['Qmin'])/(Q - (par['Kc']))) # growth limitation due to internal nutrient reserves  
        gT = 1/(1+math.exp(-(temp-(par['To']))/par['Tr'])) # growth limitation due to temperature 
        Kma = (Nf * par['acs']) * ((max(par['h']/z)) * (min(par['h']/z)**-1) # extinction rate of light due to algae (m^-1)
       
        fNH4 = (par['VNH4'] * InitCond['Nfarm'])/((K*(1/2)) + InitCond['Nfarm'])
        fNO3 = (par['VNO3'] * InitCond['Nfarm'])/((K*(1/2)) + InitCond['Nfarm'])                           
        NQ = ((par['Qmax']) - Q)/(par['Qmax']) - par(['Qmin']))    
        
        InitCond['Ns'] = fNH4 * fNO3 * NQ   
        InitCond['Nf'] = 0 # TO DO 

                
        #Estimate processes
        dNH4dt = par['λR'] * (NH4ref-NH4) - f(NH4,NQ)*B(max(hma/z)) + InitCond['Nfarm'] + par['rL']*D-(par['rN'])NH4 #eq.3 (eq.1 rearranged)
        dNO3dt = par['λR'] * (NO3ref-NO3) - f(NO3,NQ)*B(max(hma/z)) + (par['rN'])NH4 #eq.4 (eq. 2 rearranged)
        
        dNsdt = f(NXx,Q)*B(max(hma/z)-(par['μ'](gE,gQ,gT))*Ns-par['dm'] * Ns
        dNfdt = par['μ'](gE,gQ,gT) * Ns - par['dm']*Nf
        
        dDdt = par['λR'] (Dref-D) + (par['dm']*Nf-par['rl']*D)

        #Estimate Time rate of change of all State Variables (dXdt) ----
        #EXAMPLE: dPdt = 0
        
        # Update and step (time-stepping) ------------------------------
        # EXAMPLE: P[t+1] = P[t] + (dPdt * dt)
        NH4[t+1] = NH4[t] + (dNH4dt * dt)  
        NO3[t+1] = NO3[t] + (dNO3dt * dt)
        Ns[t+1] = Ns[t] + (dNsdt * dt)
        Nf[t+1] = Nf[t] + (dNfdt * dt)
        D[t+1] = D[t] + (dDdt * dt)
        
    # end of main model LOOP*******************************************************
    # *****************************************************************************

    # Pack output into dictionary
    output = {}
    output['time'] = time
    output['NH4'] = NH4
    output['NO3'] = NO3
    output['Ns'] = Ns
    output['Nf'] = Nf
    output['D'] = D

    print('Model run: DONE!!!')
    return  output

def plot(output):
    import matplotlib.pyplot as plt 
    # Plotting                      
    fig, (ax) = plt.subplots(1,1)   
    plt.show()                      
    return

if __name__ == "__main__":
    print('Executing my_module.py')
    print('--------------------')
    
    days, dt, par, InitCond = load_defaults()
    output = run(days, dt, par, InitCond)
    plot(output)
    
    print('--------------------')
   


