
def load_defaults():
    print('Loading defaults...')
    # Framework
    days = 20 # One year
    dt   = 1 # units: days    
    
    # Parameters
    par = {}
    par['k'] = 0.45 
    par['Pm'] = 24 # Jd−1 cm−3
    par['ae'] = 0.4
    par['ux'] = 4.5**10-9
    par['jxm'] = 137
    par['Xk'] = 600
    par['X'] = 1400
    par['f'] = (1+(par['Xk']/par['X'])**-1) # from manual
    par['ðm'] = 0.658 # shape coefficient 
    par['Eg'] = 1900
    
    # Initial conditions
    InitCond = {}
    InitCond['E'] = 6E-4
    InitCond['Ev'] = 2.5E-4
    InitCond['Er'] = 2.5E-4
    # EXAMPLE: InitCond['P'] = 1
    
    return  days, dt, par, InitCond
    
def run(days, dt, par, InitCond):
    print('Running model...')
    # Import libraries
    import numpy as np
    
    # Setup the framework 
    NoSTEPS = int(days / dt) # Calculates the number of steps 
    time = np.linspace(0,days,NoSTEPS-19) # Makes vector array of equally spaced numbers 
    
    # Create arrays of zeros
    # EXAMPLE: P = np.zeros((NoSTEPS), float)
    E =  np.zeros((NoSTEPS), float)
    Ev = np.zeros((NoSTEPS), float)
    Er = np.zeros((NoSTEPS), float)
    
    # Initializing with initial conditions
    # EXAMPLE: P[0] = InitCond['P']
    E[0] = InitCond['E']
    Ev[0] = InitCond['Ev']
    Er[0] = InitCond['Er']
    
    # *****************************************************************************
    # MAIN MODEL LOOP *************************************************************
    for t in range(0,NoSTEPS-1):
    # Estimate limiting functions
        
    #Estimate processes
        
        L = 0 # ((Ev[t]/par['Eg'])**(1/3))/par['ðm']
        
        #V = par['ðm']* (L**3)
        
        jx = par['f'] * par['jxm'] * (V**(2/3)) ## Altered Eq from Manual 
        
        Pa = 0 #par['ae'] * par['ux'] * jx
        Pc = 0
        Pj = 0
        
        #Estimate Time rate of change of all State Variables (dXdt) ----
        #EXAMPLE: dPdt = 0
        dEdt = Pa - Pc # Eq. 3 
        dEvdt = par['k'] * Pc - par['Pm'] # Eq. 5
        dErdt = (1-par['k']) * Pc - Pj
        
        # Update and step (time-stepping) ------------------------------
        # EXAMPLE: P[t+1] = P[t] + (dPdt * dt)
        E[t+1] = E[t] + (dEdt * dt)
        Ev[t+1] = Ev[t] + (dEvdt * dt)       
        Er[t+1] = Er[t] + (dErdt * dt)
       
    # end of main model LOOP*******************************************************
    # *****************************************************************************

    # Pack output into dictionary
        output = {}
        output['time'] = time
        output['E'] = E
        output['Ev'] = Ev
        output['Er'] = Er
        output['L'] = L
        
        print('Model run: DONE!!!')
    return  output

def plot(output):
    import matplotlib.pyplot as plt 
    # Plotting                      
    fig, (ax) = plt.subplots(1,1)
    ax.plot(output['time'],output['L'],'b-')
    #ax.legend(['B', 'Soma', 'Gonad']) 
    ax.set_ylabel('Larval length (um)') 
    ax.set_xlabel('Age since fertilization (d)') 
    plt.show()                      
    return

if __name__ == "__main__":
    print('Executing my_module.py')
    print('--------------------')
    
    days, dt, par, InitCond = load_defaults()
    output = run(days, dt, par, InitCond)
    plot(output)
    
    print('--------------------')
    
   
