# -*- coding: utf-8 -*-
"""
Created on Fri Oct  9 22:34:16 2020

@author: James-
"""
# Import libraries
import numpy as np
import math

def load_defaults():
    print('Loading defaults...')
    # Framework
    days = 10 
    dt   = 0.25    
    
    # Parameters
    par = {}
    par['α'] = -0.12 # temperature function parameter celsius^-1
    par['β'] = -0.15 # temperature function parameter celsius^-1
    par['D'] = 4.93 # temperature adjustment parameter 
    par['θm'] = 32.9 # maximum lethal temperature in degrees celsius
    par['γ'] = 1.5 # proportionality constant
    par['ε'] = 0.719 # assimilation effiency AE = (I-E)/I x 100 (no units)
    par['φ'] = 0.338 # faecal elimination rate = faecal elimation/days (g DW d^-1)
    par['Fr'] = 1.3 # feeding rate g DW d^-1
    
    
    # Initial conditions
    InitCond = {}
    #InitCond['E_i'] = 
    #InitCond['E_f'] = 
    #InitCond['E_b'] = 
    #InitCond['E_s'] = 
    InitCond['L'] = 4.4 # fish length mm 
    InitCond['θ'] = 20 # water temperature degrees celsius
    InitCond['Sc'] = 0.025 # volumetric stomach content 
    InitCond['Gc'] = 0 # gut content (DW food)
    
    
    return  days, dt, par, InitCond
    
def run(days, dt, par, InitCond):
    print('Running model...')
   
    
    # Setup the framework 
    NoSTEPS = int(days / dt) # Calculates the number of steps 
    time = np.linspace(0,days,NoSTEPS) # Makes vector array of equally spaced numbers 
    
    # Create arrays of zeros
    # EXAMPLE: P = np.zeros((NoSTEPS), float)
    #E = np.zeros((NoSTEPS,),float)
    #E_i = np.zeros((NoSTEPS,),float)
    #E_f = np.zeros((NoSTEPS,),float)
    #E_b = np.zeros((NoSTEPS,),float)
    #E_s = np.zeros((NoSTEPS,),float) 
    Sc = np.zeros((NoSTEPS,),float)  
    Gc = np.zeros((NoSTEPS,),float)         
    
    
    
    # Initializing with initial conditions
    # EXAMPLE: P[0] = InitCond['P']
    #E_i[0] = InitCond['E_i'] #energy from assimilated food (gramcal d^-1)
    #E_f[0] = InitCond['E_f'] #energy cost of feeding (gramcal d^-1)
    #E_b[0] = InitCond['E_b'] #energy cost of basal metabolism (gramcal d^-1)
    #E_s[0] = InitCond['E_s'] #energy cost of swimming (gramcal d^-1)
    #E[0] = InitCond['E_i'] - ((InitCond['E_f'] + InitCond['E_b'] + InitCond['E_s'])) #net energy balance
    Sc[0] = InitCond['Sc']
    Gc[0] = InitCond['Gc']
    
    # *****************************************************************************
    # MAIN MODEL LOOP *************************************************************
    for t in range(0,NoSTEPS-1):
        # Estimate limiting functions
      
           
        #Estimate processes
        
        #temperature_effect = (par['D']*((math.exp((par['α'])*((par['θm']-InitCond['θ']))))-(math.exp((par['β'])*((par['θm'])-InitCond['θ'])))))  # Eq.1 Feeding and digestion 2.1
        Sv = 3.587*((10**-8)*InitCond['L']**3.514) # Eq.2 Fish Stomach Capacity  
        #Log(W) = −2.1724+3.2216Log(InitCond['L']) # Eq.3 Gilthead length determined via Biomass
        dScdt = (-par['γ']*(InitCond['Sc']**0.5))# Eq.4 Gastic Evacuation in Fish, no feeding      
        dGcdt = dScdt-(par['ε']*par['Fr'])-(par['φ']*InitCond['Gc']) # Eq.5 Gastic Evacuation in Fish, feeding
        #dEdt = 0 # TO DO? Eq. 6
        

        # Update and step (time-stepping) ------------------------------
        # EXAMPLE: P[t+1] = P[t] + (dPdt * dt)
        #E[t+1] = E_i[t+1] - (E_f[t+1]+E_b[t+1]+E_s[t+1])  
        
        Sc[t+1] = Sc[t] + (dScdt * dt)
        Gc[t+1] = Gc[t] + (dGcdt * dt) 
    
    # end of main model LOOP*******************************************************
    # *****************************************************************************

    # Pack output into dictionary
    output = {}
    output['time'] = t
    #ouput ['E'] = 
    #output['θ'] = temp
    output['Sc'] = Sc 
    output['Gc'] = Gc
    output['dScdt'] = dScdt
    print('Model run: DONE!!!')
    return  output

def plot(output):
    import matplotlib.pyplot as plt 
    # Plotting               
    t = output['time']
    data1 = output['time']/10,output['Sc']
    data2 = output['time']/10,output['Gc']
    
    fig, ax1 = plt.subplots()
    
    color = 'tab:red'
    ax1.set_xlabel('Days since start of culture')
    ax1.set_ylabel('Stomach Content DW g', color = color)
    ax1.plot(t, data1, color=color)
    ax1.tick_params(axis='y', labelcolor=color)
    
    ax2=ax1.twinx()
    
    color = 'tab:blue'
    ax2.set_ylabel('Gut Content DW g')
    ax2.plot(t, data2, color=color)   
    ax2.tick_params(axis='y', labelcolor=color)
    
    fig.tight_layout() 
            
    return



if __name__ == "__main__":
    print('Executing my_module.py')
    print('--------------------')
    
    days, dt, par, InitCond = load_defaults()
    output = run(days, dt, par, InitCond)
    plot(output)
    
    print('--------------------')
    

